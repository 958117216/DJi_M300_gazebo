#include "ros/ros.h"
#include <ros/console.h>

#include "std_msgs/String.h"

/*
#include <dji_sdk/Acceleration.h>
#include <dji_sdk/AttitudeQuaternion.h>
#include <dji_sdk/LocalPosition.h>
#include <dji_sdk/Velocity.h>
#include <dji_sdk/LocalPosition.h>
#include <dji_sdk/Gimbal.h>
*/

#include <gazebo_msgs/ModelState.h>
#include <gazebo_msgs/LinkState.h>
#include <gazebo_msgs/SetModelState.h>
#include <gazebo_msgs/SetLinkState.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/QuaternionStamped.h>
#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/Vector3Stamped.h>

#include <tf/LinearMath/Quaternion.h>
#include <tf/LinearMath/Matrix3x3.h>
#include <tf/LinearMath/Vector3.h>

#include <cmath>

#include <string>


geometry_msgs::Pose target_pose;
geometry_msgs::Twist target_twist;
geometry_msgs::Pose target_gimbal_pose;
geometry_msgs::Twist target_gimbal_twist;
geometry_msgs::Pose car_target_pose;
geometry_msgs::Twist car_target_twist;


geometry_msgs::Pose target_roll_pose;
geometry_msgs::Pose target_yaw_pose;
geometry_msgs::Pose target_pitch_pose;


gazebo_msgs::ModelState target_model_state;
gazebo_msgs::LinkState target_gimbal_state;

std::string model_name = "DJi_M300";
std::string reference_frame = "world";

// std::string gimbal_link_name = "camera_link";
std::string gimbal_reference_frame = "base_link";
std::string gimbal_virtual_link_name = "gimbal_link";
std::string gimbal_roll_link_name = "roll_link";
std::string gimbal_pitch_link_name = "pitch_link";
std::string gimbal_yaw_link_name = "yaw_link";

ros::Subscriber attitude_quaternion_subscriber;
ros::Subscriber velocity_subscriber;
ros::Subscriber local_position_subscriber;
ros::Subscriber gimbal_orientation_subscriber;
ros::Subscriber car_driver_subscriber;

ros::ServiceClient model_state_client;
ros::ServiceClient gimbal_state_client;
ros::ServiceClient get_model_state_client;

gazebo_msgs::SetModelState set_model_state;
gazebo_msgs::SetLinkState set_link_state;

bool velocity_updated = false;
bool position_updated = false;

double gimbal_pitch;
double gimbal_yaw;
double gimbal_roll;

tf::Quaternion gimbal_q;

tf::Quaternion gimbal_roll_q;
tf::Quaternion gimbal_yaw_q;
tf::Quaternion gimbal_pitch_q;

tf::Quaternion car_q;
tf::Quaternion car_next_q;

tf::Matrix3x3 car_ori_m;
tf::Vector3 car_original_effort_v;
tf::Vector3 car_rotated_effort_v;

void attitudeQuaternionCallback(const geometry_msgs::QuaternionStamped::ConstPtr& attitude_quaternion_msg)
{
  target_pose.orientation.w = attitude_quaternion_msg->quaternion.w;
  target_pose.orientation.x = attitude_quaternion_msg->quaternion.x;
  target_pose.orientation.y = attitude_quaternion_msg->quaternion.y;
  target_pose.orientation.z = attitude_quaternion_msg->quaternion.z;

  target_twist.angular.x = 0;
  target_twist.angular.y = 0;
  target_twist.angular.z = 0;
   //std::cout << "attitude callback get called" << std::endl;

  
}

void velocityCallback(const geometry_msgs::Vector3Stamped::ConstPtr& velocity_msg)
{
  target_twist.linear.x  = velocity_msg->vector.x;
  target_twist.linear.y  = velocity_msg->vector.y;
  target_twist.linear.z  = velocity_msg->vector.z;

  velocity_updated = true;
  //std::cout << "velocity callback get called" << std::endl;

}

void localPositionCallback(const geometry_msgs::PointStamped::ConstPtr& position_msg)
{
  target_pose.position.x = position_msg->point.x;
  target_pose.position.y = position_msg->point.y;
  target_pose.position.z = position_msg->point.z;

  position_updated = true;
  //std::cout << "local position callback get called" << std::endl;

}



//会在这个节点汇总从大疆得到的位置、位姿、速度、角速度，并进行同步整合发布形式为nav_msgs的odom话题
//发布base_link到world坐标下的tf变换（最终导航时应去掉该tf，应转交给vio发布相关变换）
int main(int argc, char **argv)
{

  ros::init(argc, argv, "hku_m100_pcsim_gazebo_bridge");

  ros::NodeHandle n;

 
   attitude_quaternion_subscriber = n.subscribe("/dji_osdk_ros/attitude", 1000, attitudeQuaternionCallback);
 // velocity_subscriber = n.subscribe("/dji_osdk_ros/velocity", 1000, velocityCallback);
  local_position_subscriber = n.subscribe("/dji_osdk_ros/local_position", 10, localPositionCallback);

  ros::service::waitForService("/gazebo/set_model_state");
  model_state_client = n.serviceClient<gazebo_msgs::SetModelState>("/gazebo/set_model_state", true);


  ROS_INFO("Bridge between PC sim and gazebo connected");

  ros::Rate loop_rate(1000);

  while(ros::ok())
  {
   
    ros::spinOnce();

    if(true)
    {
      target_model_state.model_name = model_name;
      target_model_state.reference_frame = reference_frame;
      target_model_state.pose = target_pose;
      target_model_state.twist = target_twist;
      set_model_state.request.model_state = target_model_state;
      model_state_client.call(set_model_state);
      //std::cout << "service called" << std::endl;
    }
    else
    {
      //TODO: change to ROS_ERROR
      // std::cout << "connection with service lost!!" << std::endl;
      ROS_INFO("update model state failed.");
    }

    loop_rate.sleep();
  }


  return 0;
}
